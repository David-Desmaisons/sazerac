{"version":3,"file":null,"sources":["src/context.js","src/describer.js","src/main.js"],"sourcesContent":["'use strict'\n\nimport {concat, map, find, isString, toArray} from 'lodash'\n\nconst init = (fn, describeMessage) => {\n  return {\n    testFunction: fn,\n    cases: [],\n    describeMessage: describeMessage || fn.name + '()'\n  }\n}\n\nconst addCase = (ctx, args) => {\n\n  const argsArray = toArray(args)\n\n  return {\n    context: { \n      ...ctx,\n      cases: concat(ctx.cases, {\n        inputParams: argsArray,\n        describeMessage: describeCase(argsArray)\n      })\n    },\n    caseIndex: nextCaseIndex(ctx)\n  }\n}\n\nconst addExpectedValue = (ctx, caseIndex, expectedValue) => {\n  return {\n    ...ctx,\n    cases: updateCase(ctx.cases, caseIndex, (tCase) => {\n      return {\n        ...tCase,\n        expectedValue,\n        shouldMessage: shouldMessage(expectedValue)\n      }\n    })\n  }\n}\n\nconst nextCaseIndex = (ctx) => {\n  return ctx.cases.length;\n}\n\nconst setDescribeMessage = (ctx, applyToAll, message) => {\n  const setMsgProp = (tCase) => {\n    return { ...tCase, describeMessage: message }\n  }\n  const cases = applyToAll ?\n    map(ctx.cases, setMsgProp) : mapActiveCases(ctx.cases, setMsgProp)\n  return { ...ctx, cases }\n}\n\nconst updateCase = (cases, caseIndex, fn) => {\n  return map(cases, (tCase, i) => {\n    if (caseIndex === i) return fn(tCase)\n    return tCase\n  })\n}\n\nconst mapActiveCases = (cases, fn) => {\n  return map(cases, (tCase) => {\n    if (tCase.contextActive) return fn(tCase)\n    return tCase\n  })\n}\n\nconst describeCase = (args = []) => {\n  if (args.length > 0) {\n    const formattedArgs = args.map((arg) => {\n      return formatString(arg)\n    })\n    return 'when given ' + formattedArgs.join(' and ')\n  } else {\n    return 'when called'\n  }\n}\n\nconst shouldMessage = (expectedValue) => {\n  return 'should return ' + formatString(expectedValue)\n}\n\nconst formatString = (str) => {\n  if (isString(str)) return \"'\" + str + \"'\"\n  return str\n}\n\nexport default {\n  init,\n  addCase,\n  addExpectedValue,\n  setDescribeMessage\n}\n","'use strict'\n\nimport { forEach, map } from 'lodash'\nimport { assert } from 'chai'\n\nconst describer = (context, frameworkFunctions) => {\n  executeDescribers(buildDescriberDefinition(context, frameworkFunctions))\n}\n\nconst executeDescribers = (def) => {\n  const { func, message, calls, test } = def\n  func(message, () => {\n    test ? testExecuter.apply(null, test) : forEach(calls, (call) => { executeDescribers(call) })\n  })\n}\n\nconst testExecuter = (testFunction, inputParams, expectedValue) => {\n  const actualVal = testFunction.apply(null, inputParams)\n  assert.deepEqual(actualVal, expectedValue)\n}\n\nconst buildDescriberDefinition = (context, frameworkFunctions) => {\n  const { describeFn } = frameworkFunctions\n  const { testFunction, cases, describeMessage } = context\n  return {\n    func: describeFn,\n    message: describeMessage,\n    calls: map(cases, (tCase) => {\n      return getCaseDescriberDef(tCase, frameworkFunctions, testFunction)\n    })\n  }\n}\n\nconst getCaseDescriberDef = (tCase, frameworkFunctions, testFunction) => {\n  const { describeFn, itFn } = frameworkFunctions\n  return {\n    func: describeFn,\n    message: tCase.describeMessage,\n    calls: [getCaseShouldDef(tCase, itFn, testFunction)]\n  }\n}\n\nconst getCaseShouldDef = (tCase, itFn, testFunction) => {\n  const { shouldMessage, inputParams, expectedValue } = tCase\n  return {\n    func: itFn,\n    message: shouldMessage,\n    test: [testFunction, inputParams, expectedValue]\n  }\n}\n\nexport default describer\nexport { describer, buildDescriberDefinition, testExecuter }\n","'use strict'\n\nimport context from './context'\nimport describer from './describer'\n\nconst frameworkFns = {\n  describeFn: describe,\n  itFn: it\n}\n\nlet _ctx;\n\nconst test = (testFn, definerFn) => {\n  // TODO: throw if they're not functions\n  _ctx = context.init(testFn)\n  definerFn()\n  describer(_ctx, frameworkFns)\n}\n\nconst given = (...args) => {\n  const { caseIndex, context: ctx } = context.addCase(_ctx, args)\n  _ctx = ctx\n  return newTestCase(caseIndex)\n}\n\nconst newTestCase = (caseIndex) => {\n  return {\n    ___caseIndex: caseIndex,\n    expect: getExpectFn(caseIndex)\n  }\n}\n\nconst getExpectFn = (caseIndex) => {\n  return (expectedValue) => {\n    _ctx = context.addExpectedValue(_ctx, caseIndex, expectedValue)\n    return newTestCase(caseIndex)\n  }\n}\n\nexport { test, given }\nexport default { test, given }\n\n/*\nconst givenFn = (ctx) => {\n  return (...args) => {\n    const newCtx = context.addCase(ctx, args)\n    return chain(newCtx)\n  }\n}\n\nconst expectFn = (ctx) => {\n  return (expectedVal) => {\n    const newCtx = context.addExpectedValue(ctx, expectedVal)\n    return chain(newCtx)\n  }\n}\n\nconst describeFn = (ctx, applyToAll) => {\n  return (message) => {\n    const newCtx = context.setDescribeMessage(ctx, applyToAll, message);\n    return chain(newCtx)\n  }\n}\n*/\n\n/*const runFn = (ctx) => {\n  return () => {\n    describer(ctx, frameworkFns)\n  }\n}\n\nconst chain = (ctx) => {\n  return {\n    test: test,\n    given: givenFn(ctx),\n    expect: expectFn(ctx),\n    run: runFn(ctx),\n    describe: describeFn(ctx),\n    all: {\n      describe: describeFn(ctx, true)\n    }\n  }\n}*/\n"],"names":["init","fn","describeMessage","name","addCase","ctx","args","argsArray","_get__","cases","addExpectedValue","caseIndex","expectedValue","tCase","nextCaseIndex","length","setDescribeMessage","applyToAll","message","setMsgProp","updateCase","i","mapActiveCases","contextActive","describeCase","formattedArgs","map","arg","join","shouldMessage","formatString","str","describer","context","frameworkFunctions","executeDescribers","def","func","calls","test","apply","call","testExecuter","testFunction","inputParams","actualVal","deepEqual","buildDescriberDefinition","describeFn","getCaseDescriberDef","itFn","getCaseShouldDef","frameworkFns","describe","it","_ctx","testFn","definerFn","given","newTestCase","getExpectFn"],"mappings":"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"}