{"version":3,"file":null,"sources":["src/reducers/Actions.js","src/messages.js","src/reducers/cases.js","src/reducers/describeMessage.js","src/reducers/testFunction.js","src/reducers/state.js","src/context.js","src/describer.js","src/main.js"],"sourcesContent":["let Actions = {}\n\nconst actionsArray = [\n  'INIT',\n  'ADD_CASE',\n  'ADD_EXPECTED_VALUE'\n]\n\nactionsArray.forEach((action) => {\n  Actions[action] = action\n})\n\nconst newAction = (type, params) => {\n  return { type, ...params }\n}\n\nexport { Actions, newAction }\nexport default Actions\n","import { isString } from 'lodash'\n\nconst defaultDescribeCase = (args = []) => {\n  if (args.length > 0) {\n    const formattedArgs = args.map((arg) => {\n      return formatString(arg)\n    })\n    return 'when given ' + formattedArgs.join(' and ')\n  } else {\n    return 'when called'\n  }\n}\n\nconst defaultShouldMessage = (expectedValue) => {\n  return 'should return ' + formatString(expectedValue)\n}\n\nconst formatString = (str) => {\n  if (isString(str)) return \"'\" + str + \"'\"\n  return str\n}\n\nexport default { defaultDescribeCase, defaultShouldMessage }\nexport { defaultDescribeCase, defaultShouldMessage }\n","import { concat, toArray } from 'lodash'\nimport Actions from './Actions'\nimport { defaultDescribeCase } from '../messages'\n\nexport default (state = [], action) => {\n\n  switch(action.type) {\n    \n    case Actions.ADD_CASE:\n      const inputParams = toArray(action.args)\n      return concat(state, {\n        inputParams: inputParams,\n        describeMessage: defaultDescribeCase(inputParams)\n      })\n\n    case Actions.ADD_EXPECTED_VALUE:\n      return state\n\n    default:\n      return state\n\n  }\n\n}","import Actions from './Actions'\n\nexport default (state, action) => {\n  \n  switch(action.type) {\n    case Actions.INIT:\n      return action.describeMessage || action.fn.name + '()'\n    default:\n      return state\n  }\n\n}\n","import Actions from './Actions'\n\nexport default (state, action) => {\n\n  switch(action.type) {\n    case Actions.INIT:\n      return action.fn\n    default:\n      return state\n  }\n\n}","import Actions from './Actions'\nimport cases from './cases'\nimport describeMessage from './describeMessage'\nimport testFunction from './testFunction'\n\nexport default (state = {}, action) => {\n  return {\n    testFunction: testFunction(state.testFunction, action),\n    cases: cases(state.cases, action),\n    describeMessage: describeMessage(state.describeMessage, action)\n  }\n}","'use strict'\n\nimport { map } from 'lodash'\nimport { Actions, newAction } from './reducers/Actions'\nimport { defaultDescribeCase, defaultShouldMessage } from './messages'\nimport state from './reducers/state'\n\nconst init = (fn, describeMessage) => {\n  return state({}, newAction(Actions.INIT, { fn, describeMessage }));\n}\n\nconst addCase = (ctx, args) => {\n  return {\n    context: state(ctx, newAction(Actions.ADD_CASE, { args })),\n    caseIndex: nextCaseIndex(ctx)\n  }\n}\n\nconst addExpectedValue = (ctx, caseIndex, expectedValue) => {\n  return {\n    ...ctx,\n    cases: updateCase(ctx.cases, caseIndex, (tCase) => {\n      return {\n        ...tCase,\n        expectedValue,\n        shouldMessage: defaultShouldMessage(expectedValue)\n      }\n    })\n  }\n}\n\nconst nextCaseIndex = (ctx) => {\n  return ctx.cases.length;\n}\n\nconst setDescribeMessage = (ctx, applyToAll, message) => {\n  const setMsgProp = (tCase) => {\n    return { ...tCase, describeMessage: message }\n  }\n  const cases = applyToAll ?\n    map(ctx.cases, setMsgProp) : mapActiveCases(ctx.cases, setMsgProp)\n  return { ...ctx, cases }\n}\n\nconst updateCase = (cases, caseIndex, fn) => {\n  return map(cases, (tCase, i) => {\n    if (caseIndex === i) return fn(tCase)\n    return tCase\n  })\n}\n\nconst mapActiveCases = (cases, fn) => {\n  return map(cases, (tCase) => {\n    if (tCase.contextActive) return fn(tCase)\n    return tCase\n  })\n}\n\nexport default {\n  init,\n  addCase,\n  addExpectedValue,\n  setDescribeMessage\n}\n","'use strict'\n\nimport { forEach, map } from 'lodash'\nimport { assert } from 'chai'\n\nconst describer = (context, frameworkFunctions) => {\n  executeDescribers(buildDescriberDefinition(context, frameworkFunctions))\n}\n\nconst executeDescribers = (def) => {\n  const { func, message, calls, test } = def\n  func(message, () => {\n    test ? testExecuter.apply(null, test) : forEach(calls, (call) => { executeDescribers(call) })\n  })\n}\n\nconst testExecuter = (testFunction, inputParams, expectedValue) => {\n  const actualVal = testFunction.apply(null, inputParams)\n  assert.deepEqual(actualVal, expectedValue)\n}\n\nconst buildDescriberDefinition = (context, frameworkFunctions) => {\n  const { describeFn } = frameworkFunctions\n  const { testFunction, cases, describeMessage } = context\n  return {\n    func: describeFn,\n    message: describeMessage,\n    calls: map(cases, (tCase) => {\n      return getCaseDescriberDef(tCase, frameworkFunctions, testFunction)\n    })\n  }\n}\n\nconst getCaseDescriberDef = (tCase, frameworkFunctions, testFunction) => {\n  const { describeFn, itFn } = frameworkFunctions\n  return {\n    func: describeFn,\n    message: tCase.describeMessage,\n    calls: [getCaseShouldDef(tCase, itFn, testFunction)]\n  }\n}\n\nconst getCaseShouldDef = (tCase, itFn, testFunction) => {\n  const { shouldMessage, inputParams, expectedValue } = tCase\n  return {\n    func: itFn,\n    message: shouldMessage,\n    test: [testFunction, inputParams, expectedValue]\n  }\n}\n\nexport default describer\nexport { describer, buildDescriberDefinition, testExecuter }\n","'use strict'\n\nimport context from './context'\nimport describer from './describer'\n\nconst frameworkFns = {\n  describeFn: describe,\n  itFn: it\n}\n\nlet _ctx;\n\nconst test = (testFn, definerFn) => {\n  // TODO: throw if they're not functions\n  _ctx = context.init(testFn)\n  definerFn()\n  describer(_ctx, frameworkFns)\n}\n\nconst given = (...args) => {\n  const { caseIndex, context: ctx } = context.addCase(_ctx, args)\n  _ctx = ctx\n  return newTestCase(caseIndex)\n}\n\nconst newTestCase = (caseIndex) => {\n  return {\n    ___caseIndex: caseIndex,\n    expect: getExpectFn(caseIndex)\n  }\n}\n\nconst getExpectFn = (caseIndex) => {\n  return (expectedValue) => {\n    _ctx = context.addExpectedValue(_ctx, caseIndex, expectedValue)\n    return newTestCase(caseIndex)\n  }\n}\n\nexport { test, given }\nexport default { test, given }\n\n/*\nconst givenFn = (ctx) => {\n  return (...args) => {\n    const newCtx = context.addCase(ctx, args)\n    return chain(newCtx)\n  }\n}\n\nconst expectFn = (ctx) => {\n  return (expectedVal) => {\n    const newCtx = context.addExpectedValue(ctx, expectedVal)\n    return chain(newCtx)\n  }\n}\n\nconst describeFn = (ctx, applyToAll) => {\n  return (message) => {\n    const newCtx = context.setDescribeMessage(ctx, applyToAll, message);\n    return chain(newCtx)\n  }\n}\n*/\n\n/*const runFn = (ctx) => {\n  return () => {\n    describer(ctx, frameworkFns)\n  }\n}\n\nconst chain = (ctx) => {\n  return {\n    test: test,\n    given: givenFn(ctx),\n    expect: expectFn(ctx),\n    run: runFn(ctx),\n    describe: describeFn(ctx),\n    all: {\n      describe: describeFn(ctx, true)\n    }\n  }\n}*/\n"],"names":["Actions","actionsArray","_get__","forEach","action","newAction","type","params","defaultDescribeCase","args","length","formattedArgs","map","arg","join","defaultShouldMessage","expectedValue","formatString","str","state","ADD_CASE","inputParams","ADD_EXPECTED_VALUE","INIT","describeMessage","fn","name","testFunction","cases","init","addCase","ctx","addExpectedValue","caseIndex","tCase","nextCaseIndex","setDescribeMessage","applyToAll","message","setMsgProp","updateCase","i","mapActiveCases","contextActive","describer","context","frameworkFunctions","executeDescribers","def","func","calls","test","apply","call","testExecuter","actualVal","deepEqual","buildDescriberDefinition","describeFn","getCaseDescriberDef","itFn","getCaseShouldDef","shouldMessage","frameworkFns","describe","it","_ctx","testFn","definerFn","given","newTestCase","getExpectFn"],"mappings":"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"}