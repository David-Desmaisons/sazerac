{"version":3,"file":null,"sources":["src/reducers/Actions.js","src/reducers/cases.js","src/reducers/describeMessage.js","src/reducers/testFunction.js","src/reducers/context.js","src/context.js","src/describer.js","src/main.js"],"sourcesContent":["let Actions = {}\n\nconst actionsArray = [\n  'INIT',\n  'ADD_CASE',\n  'ADD_EXPECTED_VALUE'\n]\n\nactionsArray.forEach((action) => {\n  Actions[action] = action\n})\n\nconst newAction = (type, params) => {\n  return { type, ...params }\n}\n\nexport { Actions, newAction }\nexport default Actions\n","import Actions from './Actions'\n\nexport default (state = [], action) => {\n\n  switch(action.type) {\n    \n    case Actions.ADD_CASE:\n      return state\n\n    case Actions.ADD_EXPECTED_VALUE:\n      return state\n\n    default:\n      return state\n\n  }\n\n}","import Actions from './Actions'\n\nexport default (state, action) => {\n  \n  switch(action.type) {\n    case Actions.INIT:\n      return action.describeMessage || action.fn.name + '()'\n    default:\n      return state\n  }\n\n}\n","import Actions from './Actions'\n\nexport default (state, action) => {\n\n  switch(action.type) {\n    case Actions.INIT:\n      return action.fn\n    default:\n      return state\n  }\n\n}","import Actions from './Actions'\nimport cases from './cases'\nimport describeMessage from './describeMessage'\nimport testFunction from './testFunction'\n\nexport default (state = {}, action) => {\n  return {\n    testFunction: testFunction(state.testFunction, action),\n    cases: cases(state.cases, action),\n    describeMessage: describeMessage(state.describeMessage, action)\n  }\n}","'use strict'\n\nimport {concat, map, find, isString, toArray} from 'lodash'\nimport { Actions, newAction } from './reducers/Actions'\nimport contextReducer from './reducers/context'\n\nconst init = (fn, describeMessage) => {\n  return contextReducer({}, newAction(Actions.INIT, { fn, describeMessage }));\n}\n\nconst addCase = (ctx, args) => {\n\n  const argsArray = toArray(args)\n\n  return {\n    context: { \n      ...ctx,\n      cases: concat(ctx.cases, {\n        inputParams: argsArray,\n        describeMessage: describeCase(argsArray)\n      })\n    },\n    caseIndex: nextCaseIndex(ctx)\n  }\n}\n\nconst addExpectedValue = (ctx, caseIndex, expectedValue) => {\n  return {\n    ...ctx,\n    cases: updateCase(ctx.cases, caseIndex, (tCase) => {\n      return {\n        ...tCase,\n        expectedValue,\n        shouldMessage: shouldMessage(expectedValue)\n      }\n    })\n  }\n}\n\nconst nextCaseIndex = (ctx) => {\n  return ctx.cases.length;\n}\n\nconst setDescribeMessage = (ctx, applyToAll, message) => {\n  const setMsgProp = (tCase) => {\n    return { ...tCase, describeMessage: message }\n  }\n  const cases = applyToAll ?\n    map(ctx.cases, setMsgProp) : mapActiveCases(ctx.cases, setMsgProp)\n  return { ...ctx, cases }\n}\n\nconst updateCase = (cases, caseIndex, fn) => {\n  return map(cases, (tCase, i) => {\n    if (caseIndex === i) return fn(tCase)\n    return tCase\n  })\n}\n\nconst mapActiveCases = (cases, fn) => {\n  return map(cases, (tCase) => {\n    if (tCase.contextActive) return fn(tCase)\n    return tCase\n  })\n}\n\nconst describeCase = (args = []) => {\n  if (args.length > 0) {\n    const formattedArgs = args.map((arg) => {\n      return formatString(arg)\n    })\n    return 'when given ' + formattedArgs.join(' and ')\n  } else {\n    return 'when called'\n  }\n}\n\nconst shouldMessage = (expectedValue) => {\n  return 'should return ' + formatString(expectedValue)\n}\n\nconst formatString = (str) => {\n  if (isString(str)) return \"'\" + str + \"'\"\n  return str\n}\n\nexport default {\n  init,\n  addCase,\n  addExpectedValue,\n  setDescribeMessage\n}\n","'use strict'\n\nimport { forEach, map } from 'lodash'\nimport { assert } from 'chai'\n\nconst describer = (context, frameworkFunctions) => {\n  executeDescribers(buildDescriberDefinition(context, frameworkFunctions))\n}\n\nconst executeDescribers = (def) => {\n  const { func, message, calls, test } = def\n  func(message, () => {\n    test ? testExecuter.apply(null, test) : forEach(calls, (call) => { executeDescribers(call) })\n  })\n}\n\nconst testExecuter = (testFunction, inputParams, expectedValue) => {\n  const actualVal = testFunction.apply(null, inputParams)\n  assert.deepEqual(actualVal, expectedValue)\n}\n\nconst buildDescriberDefinition = (context, frameworkFunctions) => {\n  const { describeFn } = frameworkFunctions\n  const { testFunction, cases, describeMessage } = context\n  return {\n    func: describeFn,\n    message: describeMessage,\n    calls: map(cases, (tCase) => {\n      return getCaseDescriberDef(tCase, frameworkFunctions, testFunction)\n    })\n  }\n}\n\nconst getCaseDescriberDef = (tCase, frameworkFunctions, testFunction) => {\n  const { describeFn, itFn } = frameworkFunctions\n  return {\n    func: describeFn,\n    message: tCase.describeMessage,\n    calls: [getCaseShouldDef(tCase, itFn, testFunction)]\n  }\n}\n\nconst getCaseShouldDef = (tCase, itFn, testFunction) => {\n  const { shouldMessage, inputParams, expectedValue } = tCase\n  return {\n    func: itFn,\n    message: shouldMessage,\n    test: [testFunction, inputParams, expectedValue]\n  }\n}\n\nexport default describer\nexport { describer, buildDescriberDefinition, testExecuter }\n","'use strict'\n\nimport context from './context'\nimport describer from './describer'\n\nconst frameworkFns = {\n  describeFn: describe,\n  itFn: it\n}\n\nlet _ctx;\n\nconst test = (testFn, definerFn) => {\n  // TODO: throw if they're not functions\n  _ctx = context.init(testFn)\n  definerFn()\n  describer(_ctx, frameworkFns)\n}\n\nconst given = (...args) => {\n  const { caseIndex, context: ctx } = context.addCase(_ctx, args)\n  _ctx = ctx\n  return newTestCase(caseIndex)\n}\n\nconst newTestCase = (caseIndex) => {\n  return {\n    ___caseIndex: caseIndex,\n    expect: getExpectFn(caseIndex)\n  }\n}\n\nconst getExpectFn = (caseIndex) => {\n  return (expectedValue) => {\n    _ctx = context.addExpectedValue(_ctx, caseIndex, expectedValue)\n    return newTestCase(caseIndex)\n  }\n}\n\nexport { test, given }\nexport default { test, given }\n\n/*\nconst givenFn = (ctx) => {\n  return (...args) => {\n    const newCtx = context.addCase(ctx, args)\n    return chain(newCtx)\n  }\n}\n\nconst expectFn = (ctx) => {\n  return (expectedVal) => {\n    const newCtx = context.addExpectedValue(ctx, expectedVal)\n    return chain(newCtx)\n  }\n}\n\nconst describeFn = (ctx, applyToAll) => {\n  return (message) => {\n    const newCtx = context.setDescribeMessage(ctx, applyToAll, message);\n    return chain(newCtx)\n  }\n}\n*/\n\n/*const runFn = (ctx) => {\n  return () => {\n    describer(ctx, frameworkFns)\n  }\n}\n\nconst chain = (ctx) => {\n  return {\n    test: test,\n    given: givenFn(ctx),\n    expect: expectFn(ctx),\n    run: runFn(ctx),\n    describe: describeFn(ctx),\n    all: {\n      describe: describeFn(ctx, true)\n    }\n  }\n}*/\n"],"names":["Actions","actionsArray","_get__","forEach","action","newAction","type","params","state","ADD_CASE","ADD_EXPECTED_VALUE","INIT","describeMessage","fn","name","testFunction","cases","init","addCase","ctx","args","argsArray","addExpectedValue","caseIndex","expectedValue","tCase","nextCaseIndex","length","setDescribeMessage","applyToAll","message","setMsgProp","updateCase","i","mapActiveCases","contextActive","describeCase","formattedArgs","map","arg","join","shouldMessage","formatString","str","describer","context","frameworkFunctions","executeDescribers","def","func","calls","test","apply","call","testExecuter","inputParams","actualVal","deepEqual","buildDescriberDefinition","describeFn","getCaseDescriberDef","itFn","getCaseShouldDef","frameworkFns","describe","it","_ctx","testFn","definerFn","given","newTestCase","getExpectFn"],"mappings":"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"}