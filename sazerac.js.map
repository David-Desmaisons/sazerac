{"version":3,"file":null,"sources":["src/objectToMessageString.js","src/errors.js","src/lastCaseIndex.js","src/convertCase.js","src/messages.js","src/reducers/cases.js","src/reducers/caseAssertions.js","src/reducers/describeMessage.js","src/reducers/testFunction.js","src/reducers/store.js","src/reducers/actions.js","src/describer.js","src/testCase.js","src/objectArgsToArray.js","src/testCaseCollection.js","src/main.js"],"sourcesContent":["import { isString, isObject, isUndefined } from 'lodash'\n\nexport default (o) => {\n  if (isUndefined(o)) return 'undefined'\n  if (isString(o)) return \"'\" + o + \"'\"\n  else if (isObject) return JSON.stringify(o)\n  return o\n}\n","import objectToMessageString from './objectToMessageString'\n\nconst baseMessage = (fnName) => {\n  return 'call to `' + fnName + '()` failed. '\n}\n\nconst expectedFunction = (fnName, fnArg) => {\n  return baseMessage(fnName) + 'expected ' + \n    objectToMessageString(fnArg) + ' to be a function'\n}\n\nexport default { expectedFunction }\n","const lastCaseIndex = (ctx) => {\n  if (ctx && ctx.cases && ctx.cases.length > 0) {\n    return ctx.cases.length - 1;\n  }\n}\n\nexport { lastCaseIndex }\nexport default lastCaseIndex\n","const convertCase = (str) => {\n  return str.toLowerCase().replace(/_([a-z])/g, function (g) { return g[1].toUpperCase(); });\n}\n\nexport default convertCase\nexport { convertCase }\n","import { isFunction } from 'lodash'\nimport objectToMessageString from './objectToMessageString'\n\nconst defaultDescribeTest = (fn) => {\n  if (isFunction(fn)) {\n    if (fn.name) {\n      return fn.name + '()'\n    } else {\n      return '[anonymous function]'\n    }\n  }\n}\n\nconst defaultDescribeCase = (args = []) => {\n  if (args.length > 0) {\n    const formattedArgs = args.map((arg) => {\n      return objectToMessageString(arg)\n    })\n    return 'when given ' + formattedArgs.join(' and ')\n  } else {\n    return 'when called'\n  }\n}\n\nconst defaultShouldMessage = (expectedValue) => {\n  return 'should return ' + objectToMessageString(expectedValue)\n}\n\nexport default { defaultDescribeTest, defaultDescribeCase, defaultShouldMessage }\nexport { defaultDescribeTest, defaultDescribeCase, defaultShouldMessage }\n","import { concat, map, toArray, at, isUndefined } from 'lodash'\nimport { vsprintf } from 'sprintf-js'\nimport { actionTypes } from './actions'\nimport { defaultDescribeCase, defaultShouldMessage } from '../messages'\n\nconst updateCase = (cases, caseIndex, fn) => {\n  return map(cases, (tCase, i) => {\n    if (caseIndex === i) {\n      return fn(tCase)\n    }\n    return tCase\n  })\n}\n\nconst setCaseProps = (state, caseIndex, props) => {\n  return updateCase(state, caseIndex, (tCase) => {\n    return { ...tCase, ...props }\n  })\n}\n\nconst getCaseProp = (state, caseIndex, prop) => {\n  return at(state, '[' + caseIndex + '].' + prop)[0]\n}\n\nexport default (state = [], action) => {\n\n  const { caseIndex } = action\n\n  switch(action.type) {\n    \n    case actionTypes.ADD_CASE:\n      const inputParams = toArray(action.args)\n      return concat(state, {\n        inputParams: inputParams,\n        describeMessage: defaultDescribeCase(inputParams)\n      })\n\n    case actionTypes.SET_CASE_EXPECTED_VALUE:\n      const shouldMsg = action.message || \n                          getCaseProp(state, caseIndex, 'shouldMessage')\n      return setCaseProps(state, caseIndex, {\n          expectedValue: action.expectedValue,\n          shouldMessage: shouldMsg ? \n            vsprintf(shouldMsg, [action.expectedValue]) :\n              defaultShouldMessage(action.expectedValue)\n      })\n\n    case actionTypes.SET_CASE_DESCRIBE_MESSAGE:\n      const args = getCaseProp(state, caseIndex, 'inputParams')\n      const describeMsg = args && args.length > 0 ? \n              vsprintf(action.message, args) : action.message\n      return setCaseProps(state, caseIndex, { describeMessage: describeMsg })\n\n    case actionTypes.SET_CASE_SHOULD_MESSAGE:\n      const expectedVal = getCaseProp(state, caseIndex, 'expectedValue')\n      const msg = !isUndefined(expectedVal) ?\n                    vsprintf(action.message, [expectedVal]) : action.message\n      return setCaseProps(state, caseIndex, { shouldMessage: msg })\n\n    case actionTypes.INIT:\n      return []\n\n    default:\n      return state\n\n  }\n\n}","import { concat } from 'lodash'\nimport { actionTypes } from './actions'\n\nexport default (state = [], action) => {\n  \n  switch(action.type) {\n\n    case actionTypes.ADD_CASE_ASSERTION:\n      return concat(state, {\n        caseIndex: action.caseIndex,\n        shouldMessage: action.message,\n        assertFn: action.assertFn\n      })\n\n    case actionTypes.INIT:\n      return []\n\n    default:\n      return state\n\n  }\n\n}\n","import { actionTypes } from './actions'\nimport { defaultDescribeTest } from '../messages'\n\nexport default (state, action) => {\n  \n  switch(action.type) {\n    case actionTypes.INIT:\n      return action.describeMessage || defaultDescribeTest(action.testFn)\n    default:\n      return state\n  }\n\n}\n","import { actionTypes } from './actions'\n\nexport default (state, action) => {\n\n  switch(action.type) {\n    case actionTypes.INIT:\n      return action.testFn\n    default:\n      return state\n  }\n\n}","import cases from './cases'\nimport caseAssertions from './caseAssertions'\nimport describeMessage from './describeMessage'\nimport testFunction from './testFunction'\n\nexport default (state = {}, action) => {\n  return {\n    testFunction: testFunction(state.testFunction, action),\n    cases: cases(state.cases, action),\n    caseAssertions: caseAssertions(state.caseAssertions, action),\n    describeMessage: describeMessage(state.describeMessage, action)\n  }\n}","import { slice, isFunction } from 'lodash'\nimport convertCase from '../convertCase'\nimport store from './store'\n\nlet actions = {}\nlet actionTypes = {}\nlet state = {}\nlet listenerFns = []\n\nconst actionsArray = [\n  'INIT',\n  'ADD_CASE',\n  'SET_CASE_EXPECTED_VALUE',\n  'SET_CASE_DESCRIBE_MESSAGE',\n  'SET_CASE_SHOULD_MESSAGE',\n  'ADD_CASE_ASSERTION'\n]\n\nactionsArray.forEach((action) => {\n  actions[convertCase(action)] = (params) => {\n    return doAction(action, params)\n  }\n  actionTypes[action] = action\n})\n\nconst doAction = (type, params) => {\n  state = store(state, { type, ...params })\n  listenerFns.forEach((fn) => { fn(state) })\n  return state\n}\n\nconst listener = (fn) => {\n  if (isFunction(fn)) {\n    listenerFns.push(fn)\n  } else {\n    throw new Error('invalid listener. ' + fn + ' is not a function')\n  }\n}\n\nexport { actions, actionTypes, listener }\nexport default actions\n","import { forEach, map, filter, isUndefined } from 'lodash'\nimport { assert } from 'chai'\n\nconst describer = (context, frameworkFunctions) => {\n  executeDescribers(buildDescriberDefinition(context, frameworkFunctions))\n}\n\nconst executeDescribers = (def) => {\n  const { func, message, calls, test } = def\n  func(message, () => {\n    if (test) {\n      const { testFn, inputParams, expectedValue, assertFn } = test\n      if (expectedValue) {\n        testExecuter(testFn, inputParams, expectedValue)\n      } else if (assertFn) {\n        assertionExecuter(testFn, inputParams, assertFn)\n      }\n    } else {\n      forEach(calls, (call) => { executeDescribers(call) })\n    }\n  })\n}\n\nconst testExecuter = (testFn, inputParams, expectedValue) => {\n  const actualVal = testFn.apply(null, inputParams)\n  assert.deepEqual(actualVal, expectedValue)\n}\n\nconst assertionExecuter = (testFn, inputParams, assertFn) => {\n  const actualVal = testFn.apply(null, inputParams)\n  assertFn(actualVal)\n}\n\nconst buildDescriberDefinition = (context, frameworkFunctions) => {\n  const { describeFn } = frameworkFunctions\n  const { describeMessage } = context\n  return {\n    func: describeFn,\n    message: describeMessage,\n    calls: getCaseDescriberCalls(context, frameworkFunctions)\n  }\n}\n\nconst getCaseDescriberCalls = (context, frameworkFunctions) => {\n  const { testFunction, cases, caseAssertions } = context\n  return map(cases, (tCase, caseIndex) => {\n    const assertions = filter(caseAssertions, ['caseIndex', caseIndex])\n    return getCaseDescriberDef(tCase, frameworkFunctions, testFunction, assertions)\n  })\n}\n\nconst getCaseDescriberDef = (tCase, frameworkFunctions, testFn, assertions) => {\n  const { describeFn, itFn } = frameworkFunctions\n  return {\n    func: describeFn,\n    message: tCase.describeMessage,\n    calls: getCaseItCalls(tCase, itFn, testFn, assertions)\n  }\n}\n\nconst getCaseItCalls = (tCase, itFn, testFn, assertions) => {\n  const { shouldMessage, inputParams, expectedValue } = tCase\n  let calls = [];\n  if (!isUndefined(expectedValue)) {\n    calls.push({\n      func: itFn,\n      message: shouldMessage,\n      test: { testFn, inputParams, expectedValue }\n    })\n  }\n  if (assertions) {\n    assertions.forEach((assertion) => {\n      const { assertFn } = assertion\n      calls.push({\n        func: itFn,\n        message: assertion.shouldMessage,\n        test: { testFn, inputParams, assertFn }\n      })\n    })\n  }\n  return calls\n}\n\nexport default describer\nexport { describer, buildDescriberDefinition, testExecuter, assertionExecuter }\n","import { isArray } from 'lodash'\nimport actions from './reducers/actions'\n\n/** Creates a new test case object */\nconst newTestCase = (caseIndex) => {\n  return {\n    ___caseIndex: caseIndex,\n\n    /**\n     * Defines the expected return value for this test case. \n     * Uses http://chaijs.com, assert.deepEqual() to assert\n     * that the expected return value equals the actual\n     * return value.\n     * \n     * @param {object} expectedValue - The expected return value\n     *\n     * @returns {object} A test case object\n     */\n    expect: testCaseFn(caseIndex, 'setCaseExpectedValue', ['expectedValue', 'message']),\n\n    /**\n     * Defines the \"describe\" message for this test case.\n     * \n     * @param {string} message\n     *\n     * @returns {object} A test case object\n     */\n    describe: testCaseFn(caseIndex, 'setCaseDescribeMessage', 'message'),\n\n    /**\n     * Defines the \"should\" message for this test case. This is\n     * passed to the `it` function when executing the test.\n     * \n     * @param {string} message\n     *\n     * @returns {object} A test case object\n     */\n    should: testCaseFn(caseIndex, 'setCaseShouldMessage', 'message'),\n\n    /**\n     * Defines a custom assertion function for this test case\n     * \n     * @param {string} message - A message describing the assertion\n     * @param {function} assertFn - The custom assert function. Receives\n     *                              the actual return value of the function\n     *                              being tested as its only argument\n     *\n     * @returns {object} A test case object\n     */\n    assert: testCaseFn(caseIndex, 'addCaseAssertion', ['message', 'assertFn'])\n  }\n}\n\nconst testCaseFn = (caseIndex, action, paramNames) => {\n  paramNames = isArray(paramNames) ? paramNames : [paramNames]\n  return (...params) => {\n    let actionArgs = { caseIndex }\n    paramNames.forEach((n, i) => {\n      actionArgs[n] = params[i]\n    })\n    actions[action](actionArgs)\n    return newTestCase(caseIndex)\n  }\n}\n\nexport { newTestCase }\nexport default newTestCase\n","import { isArray } from 'lodash'\n\nexport default (objectArgs) => {\n  if (isArray(objectArgs[0])) {\n    return objectArgs[0]\n  } else {\n    return objectArgs\n  }\n}\n","import { forEach } from 'lodash'\nimport objectArgsToArray from './objectArgsToArray'\n\nconst newTestCaseCollection = (testCases) => {\n\n  testCases = objectArgsToArray(testCases)\n\n  return {\n\n    /**\n     * Defines the expected return value for all test cases in\n     * the collection. Calls expect() on each test case.\n     * \n     * @param {object} expectedValue - The expected return value\n     *\n     * @returns {object} A test case collection object\n     */\n    expect: collectionFn(testCases, 'expect'),\n\n    /**\n     * Defines the \"describe\" message for all test cases in the\n     * collection. Calls describe() on each test case.\n     * \n     * @param {string} message\n     *\n     * @returns {object} A test case collection object\n     */\n    describe: collectionFn(testCases, 'describe'),\n\n    /**\n     * Defines the \"should\" message for all test cases in the\n     * collection. Calls should() on each test case.\n     * \n     * @param {string} message\n     *\n     * @returns {object} A test case collection object\n     */\n    should: collectionFn(testCases, 'should'),\n\n    /**\n     * Defines a custom assertion function for all test cases in\n     * the collection. Calls assert() on each test case.\n     * \n     * @param {string} message - A message describing the assertion\n     * @param {function} assertFn - The custom assert function\n     *\n     * @returns {object} A test case collection object\n     */\n    assert: collectionFn(testCases, 'assert')\n  }\n}\n\nconst collectionFn = (testCases, fnName) => {\n  return (...args) => {\n    forEach(testCases, (testCase) => {\n      testCase[fnName].apply(null, args)\n    })\n    return newTestCaseCollection(testCases)\n  }\n}\n\nexport { newTestCaseCollection }\nexport default newTestCaseCollection\n","import { isFunction } from 'lodash'\nimport errors from './errors'\nimport lastCaseIndex from './lastCaseIndex'\nimport { actions, listener } from './reducers/actions'\nimport describer from './describer'\nimport { newTestCase } from './testCase'\nimport { newTestCaseCollection } from './testCaseCollection'\n\nconst frameworkFns = {\n  describeFn: describe,\n  itFn: it\n}\n\nlet _state;\n\nlistener((state) => { _state = state })\n\n/**\n * Defines test cases for a function\n *\n * @param {function} testFn - The function to test\n * @param {function} definerFn - The function that defines test cases for `testFn`\n */\nconst test = (testFn, definerFn) => {\n  if (!isFunction(testFn)) throw new Error(errors.expectedFunction('test', testFn))\n  if (!isFunction(definerFn)) throw new Error(errors.expectedFunction('test', definerFn))\n  actions.init({ testFn })\n  definerFn()\n  describer(_state, frameworkFns)\n}\n\n/**\n * Defines the given functional arguments for a test case\n *\n * @param {...object} args - The arguments that will be passed to the function being\n *                           tested\n *\n * @returns {object} A test case object\n */\nconst given = (...args) => {\n  const state = actions.addCase({ args })\n  const caseIndex = lastCaseIndex(state)\n  return newTestCase(caseIndex)\n}\n\n/**\n * Groups multiple test case objects into a collection\n *\n * @param {...object} testCases - The test case objects to group. Accepts an array or \n *                                a series of arguments\n *\n * @returns {object} A test case collection object\n */\nconst forCases = (...testCases) => {\n  return newTestCaseCollection(testCases)\n}\n\nexport { test, given, forCases }\nexport default { test, given, forCases }\n"],"names":["o","isUndefined","isString","isObject","JSON","stringify","baseMessage","fnName","expectedFunction","fnArg","objectToMessageString","lastCaseIndex","ctx","cases","length","convertCase","str","toLowerCase","replace","g","toUpperCase","defaultDescribeTest","fn","isFunction","name","defaultDescribeCase","args","formattedArgs","map","arg","join","defaultShouldMessage","expectedValue","updateCase","caseIndex","tCase","i","setCaseProps","state","props","getCaseProp","prop","at","action","type","actionTypes","ADD_CASE","inputParams","toArray","concat","SET_CASE_EXPECTED_VALUE","shouldMsg","message","vsprintf","SET_CASE_DESCRIBE_MESSAGE","describeMsg","describeMessage","SET_CASE_SHOULD_MESSAGE","expectedVal","msg","shouldMessage","INIT","ADD_CASE_ASSERTION","assertFn","testFn","testFunction","caseAssertions","actions","listenerFns","actionsArray","forEach","params","doAction","store","listener","push","Error","describer","context","frameworkFunctions","buildDescriberDefinition","executeDescribers","def","func","calls","test","call","testExecuter","actualVal","apply","deepEqual","assertionExecuter","describeFn","getCaseDescriberCalls","assertions","filter","getCaseDescriberDef","itFn","getCaseItCalls","assertion","newTestCase","testCaseFn","paramNames","isArray","actionArgs","n","objectArgs","newTestCaseCollection","testCases","objectArgsToArray","collectionFn","testCase","frameworkFns","describe","it","_state","definerFn","errors","init","given","addCase","forCases"],"mappings":"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"}