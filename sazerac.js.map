{"version":3,"file":null,"sources":["src/context.js","src/describer.js","src/main.js"],"sourcesContent":["'use strict'\n\nimport {concat, map, find, isString, toArray} from 'lodash'\n\nconst init = (fn, describeMessage) => {\n  return {\n    testFunction: fn,\n    cases: [],\n    describeMessage: describeMessage || fn.name + '()'\n  }\n}\n\nconst addCase = (ctx, args) => {\n\n  const argsArray = toArray(args)\n\n  return { \n    ...ctx,\n    cases: concat(resetContext(ctx.cases), {\n      inputParams: argsArray,\n      contextActive: true,\n      describeMessage: describeCase(argsArray)\n    })\n  }\n}\n\nconst addExpectedValue = (ctx, expectedVal) => {\n  return {\n    ...ctx,\n    cases: mapActiveCases(ctx.cases, (tCase) => {\n      return {\n        ...tCase,\n        expectedValue: expectedVal,\n        shouldMessage: shouldMessage(expectedVal)\n      }\n    })\n  }\n}\n\nconst setDescribeMessage = (ctx, applyToAll, message) => {\n  const setMsgProp = (tCase) => {\n    return { ...tCase, describeMessage: message }\n  }\n  const cases = applyToAll ?\n    map(ctx.cases, setMsgProp) : mapActiveCases(ctx.cases, setMsgProp)\n  return { ...ctx, cases }\n}\n\nconst mapActiveCases = (cases, fn) => {\n  return map(cases, (tCase) => {\n    if (tCase.contextActive) return fn(tCase)\n    return tCase\n  })\n}\n\nconst resetContext = (cases) => {\n  return map(cases, (c) => {\n    return {\n      ...c,\n      contextActive: false\n    }\n  })\n}\n\nconst describeCase = (args = []) => {\n  if (args.length > 0) {\n    const formattedArgs = args.map((arg) => {\n      return formatString(arg)\n    })\n    return 'when given ' + formattedArgs.join(' and ')\n  } else {\n    return 'when called'\n  }\n}\n\nconst shouldMessage = (expectedValue) => {\n  return 'should return ' + formatString(expectedValue)\n}\n\nconst formatString = (str) => {\n  if (isString(str)) return \"'\" + str + \"'\"\n  return str\n}\n\nexport default {\n  init,\n  addCase,\n  addExpectedValue,\n  setDescribeMessage\n}\n","'use strict'\n\nimport { forEach, map } from 'lodash'\nimport { assert } from 'chai'\n\nconst describer = (context, frameworkFunctions) => {\n  executeDescribers(buildDescriberDefinition(context, frameworkFunctions))\n}\n\nconst executeDescribers = (def) => {\n  const { func, message, calls, test } = def\n  func(message, () => {\n    test ? testExecuter.apply(null, test) : forEach(calls, (call) => { executeDescribers(call) })\n  })\n}\n\nconst testExecuter = (testFunction, inputParams, expectedValue) => {\n  const actualVal = testFunction.apply(null, inputParams)\n  assert.deepEqual(actualVal, expectedValue)\n}\n\nconst buildDescriberDefinition = (context, frameworkFunctions) => {\n  const { describeFn } = frameworkFunctions\n  const { testFunction, cases, describeMessage } = context\n  return {\n    func: describeFn,\n    message: describeMessage,\n    calls: map(cases, (tCase) => {\n      return getCaseDescriberDef(tCase, frameworkFunctions, testFunction)\n    })\n  }\n}\n\nconst getCaseDescriberDef = (tCase, frameworkFunctions, testFunction) => {\n  const { describeFn, itFn } = frameworkFunctions\n  return {\n    func: describeFn,\n    message: tCase.describeMessage,\n    calls: [getCaseShouldDef(tCase, itFn, testFunction)]\n  }\n}\n\nconst getCaseShouldDef = (tCase, itFn, testFunction) => {\n  const { shouldMessage, inputParams, expectedValue } = tCase\n  return {\n    func: itFn,\n    message: shouldMessage,\n    test: [testFunction, inputParams, expectedValue]\n  }\n}\n\nexport default describer\nexport { describer, buildDescriberDefinition, testExecuter }\n","'use strict'\n\nimport context from './context'\nimport describer from './describer'\n\nconst frameworkFns = {\n  describeFn: describe,\n  itFn: it\n}\n\nconst test = (fn) => {\n  const ctx = context.init(fn)\n  return chain(ctx)\n}\n\nconst givenFn = (ctx) => {\n  return (...args) => {\n    const newCtx = context.addCase(ctx, args)\n    return chain(newCtx)\n  }\n}\n\nconst expectFn = (ctx) => {\n  return (expectedVal) => {\n    const newCtx = context.addExpectedValue(ctx, expectedVal)\n    return chain(newCtx)\n  }\n}\n\nconst describeFn = (ctx, applyToAll) => {\n  return (message) => {\n    const newCtx = context.setDescribeMessage(ctx, applyToAll, message);\n    return chain(newCtx)\n  }\n}\n\nconst runFn = (ctx) => {\n  return () => {\n    describer(ctx, frameworkFns)\n  }\n}\n\nconst chain = (ctx) => {\n  return {\n    test: test,\n    given: givenFn(ctx),\n    expect: expectFn(ctx),\n    run: runFn(ctx),\n    describe: describeFn(ctx),\n    all: {\n      describe: describeFn(ctx, true)\n    }\n  }\n}\n\nexport default chain()\n"],"names":["init","fn","describeMessage","name","addCase","ctx","args","argsArray","_get__","cases","addExpectedValue","expectedVal","tCase","setDescribeMessage","applyToAll","message","setMsgProp","mapActiveCases","contextActive","resetContext","c","describeCase","length","formattedArgs","map","arg","join","shouldMessage","expectedValue","formatString","str","describer","context","frameworkFunctions","executeDescribers","def","func","calls","test","apply","call","testExecuter","testFunction","inputParams","actualVal","deepEqual","buildDescriberDefinition","describeFn","getCaseDescriberDef","itFn","getCaseShouldDef","frameworkFns","describe","it","givenFn","newCtx","expectFn","runFn","chain"],"mappings":"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"}