{"version":3,"file":null,"sources":["src/context.js","src/messages.js","src/reducers/cases.js","src/reducers/describeMessage.js","src/reducers/testFunction.js","src/reducers/state.js","src/reducers/Actions.js","src/describer.js","src/main.js"],"sourcesContent":["const lastCaseIndex = (ctx) => {\n  if (ctx && ctx.cases && ctx.cases.length > 0) {\n    return ctx.cases.length - 1;\n  }\n}\n\nexport { lastCaseIndex }\nexport default { lastCaseIndex }\n","import { isString } from 'lodash'\n\nconst defaultDescribeCase = (args = []) => {\n  if (args.length > 0) {\n    const formattedArgs = args.map((arg) => {\n      return formatString(arg)\n    })\n    return 'when given ' + formattedArgs.join(' and ')\n  } else {\n    return 'when called'\n  }\n}\n\nconst defaultShouldMessage = (expectedValue) => {\n  return 'should return ' + formatString(expectedValue)\n}\n\nconst formatString = (str) => {\n  if (isString(str)) return \"'\" + str + \"'\"\n  return str\n}\n\nexport default { defaultDescribeCase, defaultShouldMessage }\nexport { defaultDescribeCase, defaultShouldMessage }\n","import { concat, map, toArray } from 'lodash'\nimport Actions from './Actions'\nimport { defaultDescribeCase, defaultShouldMessage } from '../messages'\n\nconst updateCase = (cases, caseIndex, fn) => {\n  return map(cases, (tCase, i) => {\n    if (caseIndex === i) {\n      return fn(tCase)\n    }\n    return tCase\n  })\n}\n\nexport default (state = [], action) => {\n\n  switch(action.type) {\n    \n    case Actions.ADD_CASE:\n      const inputParams = toArray(action.args)\n      return concat(state, {\n        inputParams: inputParams,\n        describeMessage: defaultDescribeCase(inputParams)\n      })\n\n    case Actions.ADD_EXPECTED_VALUE:\n      return updateCase(state, action.caseIndex, (tCase) => {\n        return {\n          ...tCase,\n          expectedValue: action.expectedValue,\n          shouldMessage: defaultShouldMessage(action.expectedValue)\n        }\n      })\n\n    default:\n      return state\n\n  }\n\n}","import Actions from './Actions'\n\nexport default (state, action) => {\n  \n  switch(action.type) {\n    case Actions.INIT:\n      return action.describeMessage || action.testFn.name + '()'\n    default:\n      return state\n  }\n\n}\n","import Actions from './Actions'\n\nexport default (state, action) => {\n\n  switch(action.type) {\n    case Actions.INIT:\n      return action.testFn\n    default:\n      return state\n  }\n\n}","import Actions from './Actions'\nimport cases from './cases'\nimport describeMessage from './describeMessage'\nimport testFunction from './testFunction'\n\nexport default (state = {}, action) => {\n  return {\n    testFunction: testFunction(state.testFunction, action),\n    cases: cases(state.cases, action),\n    describeMessage: describeMessage(state.describeMessage, action)\n  }\n}","import { slice } from 'lodash'\nimport state from './state'\n\nlet Actions = {}\n\nconst actionsArray = [\n  'INIT',\n  'ADD_CASE',\n  'ADD_EXPECTED_VALUE'\n]\n\nactionsArray.forEach((action) => {\n  Actions[action] = action\n})\n\nconst doAction = (type, context, params) => {\n  return state(context, { type, ...params })\n}\n\nexport { Actions, doAction }\nexport default Actions\n","'use strict'\n\nimport { forEach, map } from 'lodash'\nimport { assert } from 'chai'\n\nconst describer = (context, frameworkFunctions) => {\n  executeDescribers(buildDescriberDefinition(context, frameworkFunctions))\n}\n\nconst executeDescribers = (def) => {\n  const { func, message, calls, test } = def\n  func(message, () => {\n    test ? testExecuter.apply(null, test) : forEach(calls, (call) => { executeDescribers(call) })\n  })\n}\n\nconst testExecuter = (testFunction, inputParams, expectedValue) => {\n  const actualVal = testFunction.apply(null, inputParams)\n  assert.deepEqual(actualVal, expectedValue)\n}\n\nconst buildDescriberDefinition = (context, frameworkFunctions) => {\n  const { describeFn } = frameworkFunctions\n  const { testFunction, cases, describeMessage } = context\n  return {\n    func: describeFn,\n    message: describeMessage,\n    calls: map(cases, (tCase) => {\n      return getCaseDescriberDef(tCase, frameworkFunctions, testFunction)\n    })\n  }\n}\n\nconst getCaseDescriberDef = (tCase, frameworkFunctions, testFunction) => {\n  const { describeFn, itFn } = frameworkFunctions\n  return {\n    func: describeFn,\n    message: tCase.describeMessage,\n    calls: [getCaseShouldDef(tCase, itFn, testFunction)]\n  }\n}\n\nconst getCaseShouldDef = (tCase, itFn, testFunction) => {\n  const { shouldMessage, inputParams, expectedValue } = tCase\n  return {\n    func: itFn,\n    message: shouldMessage,\n    test: [testFunction, inputParams, expectedValue]\n  }\n}\n\nexport default describer\nexport { describer, buildDescriberDefinition, testExecuter }\n","'use strict'\n\nimport { lastCaseIndex } from './context'\nimport { Actions, doAction } from './reducers/Actions'\nimport describer from './describer'\n\nconst frameworkFns = {\n  describeFn: describe,\n  itFn: it\n}\n\nlet _ctx;\n\nconst test = (testFn, definerFn) => {\n  // TODO: throw if they're not functions\n  _ctx = doAction(Actions.INIT, undefined, { testFn })\n  definerFn()\n  describer(_ctx, frameworkFns)\n}\n\nconst given = (...args) => {\n  _ctx = doAction(Actions.ADD_CASE, _ctx, { args })\n  const caseIndex = lastCaseIndex(_ctx)\n  return newTestCase(caseIndex)\n}\n\nconst newTestCase = (caseIndex) => {\n  return {\n    ___caseIndex: caseIndex,\n    expect: getExpectFn(caseIndex)\n  }\n}\n\nconst getExpectFn = (caseIndex) => {\n  return (expectedValue) => {\n    _ctx = doAction(Actions.ADD_EXPECTED_VALUE, _ctx, { caseIndex, expectedValue })\n    return newTestCase(caseIndex)\n  }\n}\n\nexport { test, given }\nexport default { test, given }\n"],"names":["lastCaseIndex","ctx","cases","length","defaultDescribeCase","args","formattedArgs","map","arg","_get__","join","defaultShouldMessage","expectedValue","formatString","str","updateCase","caseIndex","fn","tCase","i","state","action","type","ADD_CASE","inputParams","ADD_EXPECTED_VALUE","INIT","describeMessage","testFn","name","testFunction","Actions","actionsArray","forEach","doAction","context","params","describer","frameworkFunctions","executeDescribers","def","func","message","calls","test","apply","call","testExecuter","actualVal","deepEqual","buildDescriberDefinition","describeFn","getCaseDescriberDef","itFn","getCaseShouldDef","shouldMessage","frameworkFns","describe","it","_ctx","definerFn","undefined","given","newTestCase","getExpectFn"],"mappings":"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"}