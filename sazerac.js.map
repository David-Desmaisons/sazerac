{"version":3,"file":null,"sources":["src/objectToMessageString.js","src/errors.js","src/lastCaseIndex.js","src/convertCase.js","src/messages.js","src/reducers/cases.js","src/reducers/caseAssertions.js","src/reducers/describeMessage.js","src/reducers/testFunction.js","src/reducers/store.js","src/reducers/actions.js","src/describer.js","src/testCase.js","src/objectArgsToArray.js","src/testCaseCollection.js","src/main.js"],"sourcesContent":["import { isString, isObject, isUndefined } from 'lodash'\n\nexport default (o) => {\n  if (isUndefined(o)) return 'undefined'\n  if (isString(o)) return \"'\" + o + \"'\"\n  else if (isObject) return JSON.stringify(o)\n  return o\n}\n","import objectToMessageString from './objectToMessageString'\n\nconst baseMessage = (fnName) => {\n  return 'call to `' + fnName + '()` failed. '\n}\n\nconst expectedFunction = (fnName, fnArg) => {\n  return baseMessage(fnName) + 'expected ' + \n    objectToMessageString(fnArg) + ' to be a function'\n}\n\nexport default { expectedFunction }\n","const lastCaseIndex = (ctx) => {\n  if (ctx && ctx.cases && ctx.cases.length > 0) {\n    return ctx.cases.length - 1;\n  }\n}\n\nexport { lastCaseIndex }\nexport default lastCaseIndex\n","const convertCase = (str) => {\n  return str.toLowerCase().replace(/_([a-z])/g, function (g) { return g[1].toUpperCase(); });\n}\n\nexport default convertCase\nexport { convertCase }\n","import { isFunction } from 'lodash'\nimport objectToMessageString from './objectToMessageString'\n\nconst defaultDescribeTest = (fn) => {\n  if (isFunction(fn)) {\n    if (fn.name) {\n      return fn.name + '()'\n    } else {\n      return '[anonymous function]'\n    }\n  }\n}\n\nconst defaultDescribeCase = (args = []) => {\n  if (args.length > 0) {\n    const formattedArgs = args.map((arg) => {\n      return objectToMessageString(arg)\n    })\n    return 'when given ' + formattedArgs.join(' and ')\n  } else {\n    return 'when called'\n  }\n}\n\nconst defaultShouldMessage = (expectedValue) => {\n  return 'should return ' + objectToMessageString(expectedValue)\n}\n\nexport default { defaultDescribeTest, defaultDescribeCase, defaultShouldMessage }\nexport { defaultDescribeTest, defaultDescribeCase, defaultShouldMessage }\n","import { concat, map, toArray, at } from 'lodash'\nimport { actionTypes } from './actions'\nimport { defaultDescribeCase, defaultShouldMessage } from '../messages'\n\nconst updateCase = (cases, caseIndex, fn) => {\n  return map(cases, (tCase, i) => {\n    if (caseIndex === i) {\n      return fn(tCase)\n    }\n    return tCase\n  })\n}\n\nconst setCaseProps = (state, caseIndex, props) => {\n  return updateCase(state, caseIndex, (tCase) => {\n    return { ...tCase, ...props }\n  })\n}\n\nconst getCaseProp = (state, caseIndex, prop) => {\n  return at(state, '[' + caseIndex + '].' + prop)[0]\n}\n\nexport default (state = [], action) => {\n\n  const { caseIndex } = action\n\n  switch(action.type) {\n    \n    case actionTypes.ADD_CASE:\n      const inputParams = toArray(action.args)\n      return concat(state, {\n        inputParams: inputParams,\n        describeMessage: defaultDescribeCase(inputParams)\n      })\n\n    case actionTypes.SET_CASE_EXPECTED_VALUE:\n      const shouldMsg = getCaseProp(state, caseIndex, 'shouldMessage')\n      return setCaseProps(state, caseIndex, {\n          expectedValue: action.expectedValue,\n          shouldMessage: shouldMsg ? shouldMsg : defaultShouldMessage(action.expectedValue)\n      })\n\n    case actionTypes.SET_CASE_DESCRIBE_MESSAGE:\n      return setCaseProps(state, caseIndex, { describeMessage: action.message })\n\n    case actionTypes.SET_CASE_SHOULD_MESSAGE:\n      return setCaseProps(state, caseIndex, { shouldMessage: action.message })\n\n    case actionTypes.INIT:\n      return []\n\n    default:\n      return state\n\n  }\n\n}","import { concat } from 'lodash'\nimport { actionTypes } from './actions'\n\nexport default (state = [], action) => {\n  \n  switch(action.type) {\n\n    case actionTypes.ADD_CASE_ASSERTION:\n      return concat(state, {\n        caseIndex: action.caseIndex,\n        shouldMessage: action.message,\n        assertFn: action.assertFn\n      })\n\n    case actionTypes.INIT:\n      return []\n\n    default:\n      return state\n\n  }\n\n}\n","import { actionTypes } from './actions'\nimport { defaultDescribeTest } from '../messages'\n\nexport default (state, action) => {\n  \n  switch(action.type) {\n    case actionTypes.INIT:\n      return action.describeMessage || defaultDescribeTest(action.testFn)\n    default:\n      return state\n  }\n\n}\n","import { actionTypes } from './actions'\n\nexport default (state, action) => {\n\n  switch(action.type) {\n    case actionTypes.INIT:\n      return action.testFn\n    default:\n      return state\n  }\n\n}","import cases from './cases'\nimport caseAssertions from './caseAssertions'\nimport describeMessage from './describeMessage'\nimport testFunction from './testFunction'\n\nexport default (state = {}, action) => {\n  return {\n    testFunction: testFunction(state.testFunction, action),\n    cases: cases(state.cases, action),\n    caseAssertions: caseAssertions(state.caseAssertions, action),\n    describeMessage: describeMessage(state.describeMessage, action)\n  }\n}","import { slice, isFunction } from 'lodash'\nimport convertCase from '../convertCase'\nimport store from './store'\n\nlet actions = {}\nlet actionTypes = {}\nlet state = {}\nlet listenerFns = []\n\nconst actionsArray = [\n  'INIT',\n  'ADD_CASE',\n  'SET_CASE_EXPECTED_VALUE',\n  'SET_CASE_DESCRIBE_MESSAGE',\n  'SET_CASE_SHOULD_MESSAGE',\n  'ADD_CASE_ASSERTION'\n]\n\nactionsArray.forEach((action) => {\n  actions[convertCase(action)] = (params) => {\n    return doAction(action, params)\n  }\n  actionTypes[action] = action\n})\n\nconst doAction = (type, params) => {\n  state = store(state, { type, ...params })\n  listenerFns.forEach((fn) => { fn(state) })\n  return state\n}\n\nconst listener = (fn) => {\n  if (isFunction(fn)) {\n    listenerFns.push(fn)\n  } else {\n    throw new Error('invalid listener. ' + fn + ' is not a function')\n  }\n}\n\nexport { actions, actionTypes, listener }\nexport default actions\n","import { forEach, map, filter, isUndefined } from 'lodash'\nimport { assert } from 'chai'\n\nconst describer = (context, frameworkFunctions) => {\n  executeDescribers(buildDescriberDefinition(context, frameworkFunctions))\n}\n\nconst executeDescribers = (def) => {\n  const { func, message, calls, test } = def\n  func(message, () => {\n    if (test) {\n      const { testFn, inputParams, expectedValue, assertFn } = test\n      if (expectedValue) {\n        testExecuter(testFn, inputParams, expectedValue)\n      } else if (assertFn) {\n        assertionExecuter(testFn, inputParams, assertFn)\n      }\n    } else {\n      forEach(calls, (call) => { executeDescribers(call) })\n    }\n  })\n}\n\nconst testExecuter = (testFn, inputParams, expectedValue) => {\n  const actualVal = testFn.apply(null, inputParams)\n  assert.deepEqual(actualVal, expectedValue)\n}\n\nconst assertionExecuter = (testFn, inputParams, assertFn) => {\n  const actualVal = testFn.apply(null, inputParams)\n  assertFn(actualVal)\n}\n\nconst buildDescriberDefinition = (context, frameworkFunctions) => {\n  const { describeFn } = frameworkFunctions\n  const { describeMessage } = context\n  return {\n    func: describeFn,\n    message: describeMessage,\n    calls: getCaseDescriberCalls(context, frameworkFunctions)\n  }\n}\n\nconst getCaseDescriberCalls = (context, frameworkFunctions) => {\n  const { testFunction, cases, caseAssertions } = context\n  return map(cases, (tCase, caseIndex) => {\n    const assertions = filter(caseAssertions, ['caseIndex', caseIndex])\n    return getCaseDescriberDef(tCase, frameworkFunctions, testFunction, assertions)\n  })\n}\n\nconst getCaseDescriberDef = (tCase, frameworkFunctions, testFn, assertions) => {\n  const { describeFn, itFn } = frameworkFunctions\n  return {\n    func: describeFn,\n    message: tCase.describeMessage,\n    calls: getCaseItCalls(tCase, itFn, testFn, assertions)\n  }\n}\n\nconst getCaseItCalls = (tCase, itFn, testFn, assertions) => {\n  const { shouldMessage, inputParams, expectedValue } = tCase\n  let calls = [];\n  if (!isUndefined(expectedValue)) {\n    calls.push({\n      func: itFn,\n      message: shouldMessage,\n      test: { testFn, inputParams, expectedValue }\n    })\n  }\n  if (assertions) {\n    assertions.forEach((assertion) => {\n      const { assertFn } = assertion\n      calls.push({\n        func: itFn,\n        message: assertion.shouldMessage,\n        test: { testFn, inputParams, assertFn }\n      })\n    })\n  }\n  return calls\n}\n\nexport default describer\nexport { describer, buildDescriberDefinition, testExecuter, assertionExecuter }\n","import { isArray } from 'lodash'\nimport actions from './reducers/actions'\n\nconst newTestCase = (caseIndex) => {\n  return {\n    ___caseIndex: caseIndex,\n    expect: testCaseFn(caseIndex, 'setCaseExpectedValue', 'expectedValue'),\n    describe: testCaseFn(caseIndex, 'setCaseDescribeMessage', 'message'),\n    should: testCaseFn(caseIndex, 'setCaseShouldMessage', 'message'),\n    assert: testCaseFn(caseIndex, 'addCaseAssertion', ['message', 'assertFn'])\n  }\n}\n\nconst testCaseFn = (caseIndex, action, paramNames) => {\n  paramNames = isArray(paramNames) ? paramNames : [paramNames]\n  return (...params) => {\n    let actionArgs = { caseIndex }\n    paramNames.forEach((n, i) => {\n      actionArgs[n] = params[i]\n    })\n    actions[action](actionArgs)\n    return newTestCase(caseIndex)\n  }\n}\n\nexport { newTestCase }\nexport default newTestCase\n","import { isArray } from 'lodash'\n\nexport default (objectArgs) => {\n  if (isArray(objectArgs[0])) {\n    return objectArgs[0]\n  } else {\n    return objectArgs\n  }\n}\n","import { forEach } from 'lodash'\nimport objectArgsToArray from './objectArgsToArray'\n\nconst newTestCaseCollection = (testCases) => {\n\n  testCases = objectArgsToArray(testCases)\n\n  return {\n    expect: collectionFn(testCases, 'expect'),\n    describe: collectionFn(testCases, 'describe'),\n    should: collectionFn(testCases, 'should'),\n    assert: collectionFn(testCases, 'assert')\n  }\n}\n\nconst collectionFn = (testCases, fnName) => {\n  return (...args) => {\n    forEach(testCases, (testCase) => {\n      testCase[fnName].apply(null, args)\n    })\n    return newTestCaseCollection(testCases)\n  }\n}\n\nexport { newTestCaseCollection }\nexport default newTestCaseCollection\n","import { isFunction } from 'lodash'\nimport errors from './errors'\nimport lastCaseIndex from './lastCaseIndex'\nimport { actions, listener } from './reducers/actions'\nimport describer from './describer'\nimport { newTestCase } from './testCase'\nimport { newTestCaseCollection } from './testCaseCollection'\n\nconst frameworkFns = {\n  describeFn: describe,\n  itFn: it\n}\n\nlet _state;\n\nlistener((state) => { _state = state })\n\nconst test = (testFn, definerFn) => {\n  if (!isFunction(testFn)) throw new Error(errors.expectedFunction('test', testFn))\n  if (!isFunction(definerFn)) throw new Error(errors.expectedFunction('test', definerFn))\n  actions.init({ testFn })\n  definerFn()\n  describer(_state, frameworkFns)\n}\n\nconst given = (...args) => {\n  const state = actions.addCase({ args })\n  const caseIndex = lastCaseIndex(state)\n  return newTestCase(caseIndex)\n}\n\nconst forCases = (...testCases) => {\n  return newTestCaseCollection(testCases)\n}\n\nexport { test, given, forCases }\nexport default { test, given, forCases }\n"],"names":["o","_get__","JSON","stringify","baseMessage","fnName","expectedFunction","fnArg","lastCaseIndex","ctx","cases","length","convertCase","str","toLowerCase","replace","g","toUpperCase","defaultDescribeTest","fn","name","defaultDescribeCase","args","formattedArgs","map","arg","join","defaultShouldMessage","expectedValue","updateCase","caseIndex","tCase","i","setCaseProps","state","props","getCaseProp","prop","action","type","ADD_CASE","inputParams","SET_CASE_EXPECTED_VALUE","shouldMsg","SET_CASE_DESCRIBE_MESSAGE","describeMessage","message","SET_CASE_SHOULD_MESSAGE","shouldMessage","INIT","ADD_CASE_ASSERTION","assertFn","testFn","testFunction","caseAssertions","actions","actionTypes","listenerFns","actionsArray","forEach","params","doAction","listener","push","Error","describer","context","frameworkFunctions","executeDescribers","def","func","calls","test","call","testExecuter","actualVal","apply","deepEqual","assertionExecuter","buildDescriberDefinition","describeFn","getCaseDescriberCalls","assertions","getCaseDescriberDef","itFn","getCaseItCalls","assertion","newTestCase","testCaseFn","paramNames","actionArgs","n","objectArgs","newTestCaseCollection","testCases","collectionFn","testCase","frameworkFns","describe","it","_state","definerFn","init","given","addCase","forCases"],"mappings":"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"}