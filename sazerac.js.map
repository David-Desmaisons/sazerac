{"version":3,"file":null,"sources":["src/lastCaseIndex.js","src/convertCase.js","src/messages.js","src/reducers/cases.js","src/reducers/describeMessage.js","src/reducers/testFunction.js","src/reducers/store.js","src/reducers/actions.js","src/describer.js","src/testCase.js","src/main.js"],"sourcesContent":["const lastCaseIndex = (ctx) => {\n  if (ctx && ctx.cases && ctx.cases.length > 0) {\n    return ctx.cases.length - 1;\n  }\n}\n\nexport { lastCaseIndex }\nexport default lastCaseIndex\n","const convertCase = (str) => {\n  return str.toLowerCase().replace(/_([a-z])/g, function (g) { return g[1].toUpperCase(); });\n}\n\nexport default convertCase\nexport { convertCase }\n","import { isString, isFunction } from 'lodash'\n\nconst defaultDescribeTest = (fn) => {\n  if (isFunction(fn) && fn.name) {\n    return fn.name + '()'\n  }\n}\n\nconst defaultDescribeCase = (args = []) => {\n  if (args.length > 0) {\n    const formattedArgs = args.map((arg) => {\n      return formatString(arg)\n    })\n    return 'when given ' + formattedArgs.join(' and ')\n  } else {\n    return 'when called'\n  }\n}\n\nconst defaultShouldMessage = (expectedValue) => {\n  return 'should return ' + formatString(expectedValue)\n}\n\nconst formatString = (str) => {\n  if (isString(str)) return \"'\" + str + \"'\"\n  return str\n}\n\nexport default { defaultDescribeTest, defaultDescribeCase, defaultShouldMessage }\nexport { defaultDescribeTest, defaultDescribeCase, defaultShouldMessage }\n","import { concat, map, toArray } from 'lodash'\nimport { actionTypes } from './actions'\nimport { defaultDescribeCase, defaultShouldMessage } from '../messages'\n\nconst updateCase = (cases, caseIndex, fn) => {\n  return map(cases, (tCase, i) => {\n    if (caseIndex === i) {\n      return fn(tCase)\n    }\n    return tCase\n  })\n}\n\nexport default (state = [], action) => {\n\n  switch(action.type) {\n    \n    case actionTypes.ADD_CASE:\n      const inputParams = toArray(action.args)\n      return concat(state, {\n        inputParams: inputParams,\n        describeMessage: defaultDescribeCase(inputParams)\n      })\n\n    case actionTypes.ADD_EXPECTED_VALUE:\n      return updateCase(state, action.caseIndex, (tCase) => {\n        return {\n          ...tCase,\n          expectedValue: action.expectedValue,\n          shouldMessage: defaultShouldMessage(action.expectedValue)\n        }\n      })\n\n    case actionTypes.SET_CASE_DESCRIBE_MESSAGE:\n      return updateCase(state, action.caseIndex, (tCase) => {\n        return {\n          ...tCase,\n          describeMessage: action.message\n        }\n      })\n\n    default:\n      return state\n\n  }\n\n}","import { actionTypes } from './actions'\nimport { defaultDescribeTest } from '../messages'\n\nexport default (state, action) => {\n  \n  switch(action.type) {\n    case actionTypes.INIT:\n      return action.describeMessage || defaultDescribeTest(action.testFn)\n    default:\n      return state\n  }\n\n}\n","import { actionTypes } from './actions'\n\nexport default (state, action) => {\n\n  switch(action.type) {\n    case actionTypes.INIT:\n      return action.testFn\n    default:\n      return state\n  }\n\n}","import cases from './cases'\nimport describeMessage from './describeMessage'\nimport testFunction from './testFunction'\n\nexport default (state = {}, action) => {\n  return {\n    testFunction: testFunction(state.testFunction, action),\n    cases: cases(state.cases, action),\n    describeMessage: describeMessage(state.describeMessage, action)\n  }\n}","import { slice, isFunction } from 'lodash'\nimport convertCase from '../convertCase'\nimport store from './store'\n\nlet actions = {}\nlet actionTypes = {}\nlet state = {}\nlet listenerFns = []\n\nconst actionsArray = [\n  'INIT',\n  'ADD_CASE',\n  'ADD_EXPECTED_VALUE',\n  'SET_CASE_DESCRIBE_MESSAGE'\n]\n\nactionsArray.forEach((action) => {\n  actions[convertCase(action)] = (params) => {\n    return doAction(action, params)\n  }\n  actionTypes[action] = action\n})\n\nconst doAction = (type, params) => {\n  state = store(state, { type, ...params })\n  listenerFns.forEach((fn) => { fn(state) })\n  return state\n}\n\nconst listener = (fn) => {\n  if (isFunction(fn)) {\n    listenerFns.push(fn)\n  } else {\n    throw new Error('invalid listener. ' + fn + ' is not a function')\n  }\n}\n\nexport { actions, actionTypes, listener }\nexport default actions\n","import { forEach, map } from 'lodash'\nimport { assert } from 'chai'\n\nconst describer = (context, frameworkFunctions) => {\n  executeDescribers(buildDescriberDefinition(context, frameworkFunctions))\n}\n\nconst executeDescribers = (def) => {\n  const { func, message, calls, test } = def\n  func(message, () => {\n    test ? testExecuter.apply(null, test) : forEach(calls, (call) => { executeDescribers(call) })\n  })\n}\n\nconst testExecuter = (testFunction, inputParams, expectedValue) => {\n  const actualVal = testFunction.apply(null, inputParams)\n  assert.deepEqual(actualVal, expectedValue)\n}\n\nconst buildDescriberDefinition = (context, frameworkFunctions) => {\n  const { describeFn } = frameworkFunctions\n  const { testFunction, cases, describeMessage } = context\n  return {\n    func: describeFn,\n    message: describeMessage,\n    calls: map(cases, (tCase) => {\n      return getCaseDescriberDef(tCase, frameworkFunctions, testFunction)\n    })\n  }\n}\n\nconst getCaseDescriberDef = (tCase, frameworkFunctions, testFunction) => {\n  const { describeFn, itFn } = frameworkFunctions\n  return {\n    func: describeFn,\n    message: tCase.describeMessage,\n    calls: [getCaseShouldDef(tCase, itFn, testFunction)]\n  }\n}\n\nconst getCaseShouldDef = (tCase, itFn, testFunction) => {\n  const { shouldMessage, inputParams, expectedValue } = tCase\n  return {\n    func: itFn,\n    message: shouldMessage,\n    test: [testFunction, inputParams, expectedValue]\n  }\n}\n\nexport default describer\nexport { describer, buildDescriberDefinition, testExecuter }\n","import actions from './reducers/actions'\n\nconst newTestCase = (caseIndex) => {\n  return {\n    ___caseIndex: caseIndex,\n    expect: getExpectFn(caseIndex),\n    describe: getDescribeFn(caseIndex)\n  }\n}\n\nconst getExpectFn = (caseIndex) => {\n  return (expectedValue) => {\n    actions.addExpectedValue({ caseIndex, expectedValue })\n    return newTestCase(caseIndex)\n  }\n}\n\nconst getDescribeFn = (caseIndex) => {\n  return (message) => {\n    actions.setCaseDescribeMessage({ caseIndex, message })\n    return newTestCase(caseIndex)\n  }\n}\n\nexport { newTestCase }\nexport default newTestCase\n","import lastCaseIndex from './lastCaseIndex'\nimport { actions, listener } from './reducers/actions'\nimport describer from './describer'\nimport { newTestCase } from './testCase'\n\nconst frameworkFns = {\n  describeFn: describe,\n  itFn: it\n}\n\nlet _state;\n\nlistener((state) => { _state = state })\n\nconst test = (testFn, definerFn) => {\n  actions.init({ testFn })\n  definerFn()\n  describer(_state, frameworkFns)\n}\n\nconst given = (...args) => {\n  const state = actions.addCase({ args })\n  const caseIndex = lastCaseIndex(state)\n  return newTestCase(caseIndex)\n}\n\nexport { test, given }\nexport default { test, given }\n"],"names":["lastCaseIndex","ctx","cases","length","convertCase","str","toLowerCase","replace","g","toUpperCase","defaultDescribeTest","fn","_get__","name","defaultDescribeCase","args","formattedArgs","map","arg","join","defaultShouldMessage","expectedValue","formatString","updateCase","caseIndex","tCase","i","state","action","type","ADD_CASE","inputParams","ADD_EXPECTED_VALUE","SET_CASE_DESCRIBE_MESSAGE","message","INIT","describeMessage","testFn","testFunction","actions","actionTypes","listenerFns","actionsArray","forEach","params","doAction","listener","push","Error","describer","context","frameworkFunctions","executeDescribers","def","func","calls","test","apply","call","testExecuter","actualVal","deepEqual","buildDescriberDefinition","describeFn","getCaseDescriberDef","itFn","getCaseShouldDef","shouldMessage","newTestCase","getExpectFn","addExpectedValue","getDescribeFn","setCaseDescribeMessage","frameworkFns","describe","it","_state","definerFn","init","given","addCase"],"mappings":"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"}